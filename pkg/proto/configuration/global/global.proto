syntax = "proto3";

package buildbarn.configuration.global;

import "google/protobuf/duration.proto";

option go_package = "github.com/buildbarn/bb-storage/pkg/proto/configuration/global";

message DatadogConfiguration {
  // Namespace specifies the namespaces to which metric keys are appended.
  string namespace = 1;

  // Service specifies the service name used for tracing.
  string service   = 2;

  // TraceAddr specifies the host[:port] address of the Datadog Trace Agent.
	// It defaults to localhost:8126.
  string trace_addr = 3;

  // Tags specifies a set of global tags to attach to each metric.
  repeated string tags = 4;

  // GlobalTags holds a set of tags that will automatically be applied to all
	// exported spans.
  // map<string, string> global_tags = 5;

  // DisableCountPerBuckets specifies whether to emit count_per_bucket metrics
  // bool disable_count_per_buckets = 5;

  // TagMetricNames specifies whether to include tags to metric names.
  // bool tag_metric_names = 6;
}

message JaegerConfiguration {
  // Jaeger agent endpoint.
  string agent_endpoint = 1;

  // Jaeger collector endpoint.
  string collector_endpoint = 2;

  // OpenTracing service name.
  string service_name = 3;
}

message StackdriverConfiguration {
  // GCP project to which trace data is sent.
  // Can be left blank if in GCP, automatically determined from metadata server.
  string project_id = 1;

  // Location is the identifier of the GCP or AWS cloud region/zone in which
  // the data for a resource is stored. (defaults to info from metadata server)
  string location = 2;

  // Additional attributes to add to all spans by default.
  map<string, string> default_trace_attributes = 3;
}

message BasicAuthenticationConfiguration {
  // Username to store in the "Authorization: Basic" header.
  string username = 1;

  // Password to store in the "Authorization: Basic" header.
  string password = 2;
}

message PrometheusPushgatewayConfiguration {
  // URL of the Prometheus Pushgateway server. Do not include the
  // "/metrics/jobs/..." part in the URL.
  string url = 1;

  // Name of the job to announce to the Prometheus Pushgateway.
  string job = 2;

  // If set, enable the use of HTTP basic authentication.
  BasicAuthenticationConfiguration basic_authentication = 3;

  // Label pairs to use as the grouping key.
  map<string, string> grouping = 4;

  // Interval between metrics pushes.
  google.protobuf.Duration push_interval = 5;
}

message TracingConfiguration {
  // Jaeger configuration for tracing.
  JaegerConfiguration jaeger = 1;

  // Stackdriver Trace configuration for tracing.
  StackdriverConfiguration stackdriver = 2;

  // Export stats on traces to Prometheus.
  bool enable_prometheus = 3;

  // Whether or not all traces should be sampled.
  bool always_sample = 4;
  
  DatadogConfiguration datadog = 5;
}

message Configuration {
  // Configuration for sending tracing data to various services.
  TracingConfiguration tracing = 1;

  // Sets the runtime.SetMutexProfileFraction(), so that the HTTP debug
  // endpoints used by pprof expose mutex profiling information.
  int32 mutex_profile_fraction = 2;

  // Periodically push metrics to a Prometheus Pushgateway, as opposed
  // to letting the Prometheus server scrape the metrics.
  PrometheusPushgatewayConfiguration prometheus_pushgateway = 3;
}
